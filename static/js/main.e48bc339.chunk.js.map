{"version":3,"sources":["components/NodalAnalysis.js","App.js","reportWebVitals.js","index.js"],"names":["NodalAnalysis","selectedTab","setSelectedTab","useState","tubingSize","setTubingSize","isGasLiftActive","setIsGasLiftActive","gasLiftRate","setGasLiftRate","showComparisonCurves","setShowComparisonCurves","reservoirPressure","setReservoirPressure","bubblePointPressure","setBubblePointPressure","productivityIndex","setProductivityIndex","baseParams","productivity","maxFlowRate","wellheadPressure","calculateVLP","tubingDiameter","useGasLift","gasLiftRatio","data","calculateIPR","flowRate","pressure","Math","pow","qb","ratio","push","iprPressure","max","a","b","c","forEach","point","vlpPressure","findOperatingPoint","i","length","prev","curr","getCurrentData","operatingPoint","getTubingSizeComparisonData","small","medium","large","getGasLiftComparisonData","noGasLift","lowGasLift","highGasLift","getComparisonOperatingPoints","current","React","createElement","className","onClick","renderTabContent","type","min","step","value","onChange","e","Number","target","id","checked","htmlFor","toFixed","renderMainChart","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","domain","YAxis","angle","Tooltip","formatter","name","labelFormatter","Legend","Line","stroke","dot","strokeWidth","ReferenceLine","y","fill","fontSize","Fragment","x","renderTubingComparisonCurves","comparisonData","renderGasLiftComparisonCurves","renderResultsTable","comparisonPoints","hasComparisonData","Object","keys","entries","map","_ref","key","nameMap","basePoint","improvement","renderRecommendations","recommendationText","actionItems","smallPoint","largePoint","highGasLiftPoint","item","index","App","href","rel","Date","getFullYear","role","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e48bc339.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine, ResponsiveContainer } from 'recharts';\r\nimport './NodalAnalysis.css';\r\n\r\nconst NodalAnalysis = () => {\r\n  // Estados para controlar los parámetros\r\n  const [selectedTab, setSelectedTab] = useState('basic');\r\n  const [tubingSize, setTubingSize] = useState(3.5);\r\n  const [isGasLiftActive, setIsGasLiftActive] = useState(false);\r\n  const [gasLiftRate, setGasLiftRate] = useState(1.0);\r\n  const [showComparisonCurves, setShowComparisonCurves] = useState(false);\r\n  const [reservoirPressure, setReservoirPressure] = useState(3000);\r\n  const [bubblePointPressure, setBubblePointPressure] = useState(1800);\r\n  const [productivityIndex, setProductivityIndex] = useState(1.2);\r\n\r\n  // Parámetros base del sistema\r\n  const baseParams = {\r\n    reservoirPressure: reservoirPressure, // psi\r\n    bubblePointPressure: bubblePointPressure, // psi\r\n    productivity: productivityIndex, // STB/d/psi\r\n    maxFlowRate: 700, // STB/d\r\n    wellheadPressure: 150 // psi\r\n  };\r\n\r\n  // Función para calcular curva IPR (Vogel)\r\n  const calculateIPR = () => {\r\n    const data = [];\r\n    const { reservoirPressure, bubblePointPressure, productivity, maxFlowRate } = baseParams;\r\n    \r\n    // Puntos para la curva\r\n    for (let flowRate = 0; flowRate <= maxFlowRate; flowRate += maxFlowRate / 40) {\r\n      let pressure;\r\n      \r\n      if (reservoirPressure <= bubblePointPressure) {\r\n        // Caso completamente saturado (Vogel)\r\n        pressure = reservoirPressure * (1 - 0.2 * (flowRate / maxFlowRate) - 0.8 * Math.pow(flowRate / maxFlowRate, 2));\r\n      } else {\r\n        // Sistema combinado: subsaturado + saturado\r\n        if (flowRate <= productivity * (reservoirPressure - bubblePointPressure)) {\r\n          // Región subsaturada - Relación lineal (Darcy)\r\n          pressure = reservoirPressure - (flowRate / productivity);\r\n        } else {\r\n          // Región saturada - Ecuación de Vogel\r\n          const qb = productivity * (reservoirPressure - bubblePointPressure);\r\n          const ratio = (flowRate - qb) / (maxFlowRate - qb);\r\n          pressure = bubblePointPressure * (1 - 0.2 * ratio - 0.8 * Math.pow(ratio, 2));\r\n        }\r\n      }\r\n      \r\n      data.push({\r\n        flowRate,\r\n        iprPressure: Math.max(0, pressure)\r\n      });\r\n    }\r\n    \r\n    return data;\r\n  };\r\n\r\n  // Función para calcular curva VLP (Vertical Lift Performance)\r\n  const calculateVLP = (tubingDiameter, useGasLift, gasLiftRatio) => {\r\n    const data = calculateIPR();\r\n    const { wellheadPressure } = baseParams;\r\n    \r\n    // Parámetros que afectan la forma de la curva VLP\r\n    let a = 1500 - (tubingDiameter * 120); // Factor para el punto mínimo\r\n    let b = 0.8 - (tubingDiameter * 0.05); // Factor de curvatura\r\n    let c = 150 + (tubingDiameter * 20); // Factor de inclinación inicial\r\n    \r\n    // Ajustes para gas lift (reduce densidad del fluido)\r\n    if (useGasLift) {\r\n      a = a * (1 - 0.25 * gasLiftRatio); // Menor columna hidrostática\r\n      b = b * (1 + 0.15 * gasLiftRatio); // Mayor fricción a altos caudales\r\n      c = c * (1 - 0.1 * gasLiftRatio); // Menor caída inicial\r\n    }\r\n    \r\n    // Calcular presión VLP para cada punto\r\n    data.forEach(point => {\r\n      if (point.flowRate < 10) {\r\n        // A caudales muy bajos, domina la presión hidrostática\r\n        point.vlpPressure = wellheadPressure + a - 10;\r\n      } else {\r\n        // Forma de U característica\r\n        point.vlpPressure = wellheadPressure + a - (c * Math.pow(point.flowRate / 100, 0.5)) + \r\n                           (b * Math.pow(point.flowRate / 100, 2) * 100);\r\n      }\r\n    });\r\n    \r\n    return data;\r\n  };\r\n\r\n  // Función para encontrar el punto de operación\r\n  const findOperatingPoint = (data) => {\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prev = data[i-1];\r\n      const curr = data[i];\r\n      \r\n      // Buscar el punto donde las curvas se cruzan\r\n      if ((prev.iprPressure > prev.vlpPressure && curr.iprPressure < curr.vlpPressure) ||\r\n          (prev.iprPressure < prev.vlpPressure && curr.iprPressure > curr.vlpPressure)) {\r\n        \r\n        // Interpolación lineal para encontrar el punto exacto\r\n        const ratio = (prev.vlpPressure - prev.iprPressure) / \r\n                     ((curr.iprPressure - prev.iprPressure) - (curr.vlpPressure - prev.vlpPressure));\r\n        \r\n        const opRate = prev.flowRate + ratio * (curr.flowRate - prev.flowRate);\r\n        const opPressure = prev.iprPressure + ratio * (curr.iprPressure - prev.iprPressure);\r\n        \r\n        return {\r\n          flowRate: opRate,\r\n          pressure: opPressure\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Si no se encuentra intersección\r\n    return null;\r\n  };\r\n\r\n  // Obtener los datos para el gráfico actual\r\n  const getCurrentData = () => {\r\n    return calculateVLP(tubingSize, isGasLiftActive, gasLiftRate);\r\n  };\r\n\r\n  // Punto de operación actual\r\n  const operatingPoint = findOperatingPoint(getCurrentData());\r\n  \r\n  // Obtener datos para comparación de tubings\r\n  const getTubingSizeComparisonData = () => {\r\n    return {\r\n      small: calculateVLP(2.5, isGasLiftActive, gasLiftRate),\r\n      medium: calculateVLP(3.5, isGasLiftActive, gasLiftRate),\r\n      large: calculateVLP(4.5, isGasLiftActive, gasLiftRate)\r\n    };\r\n  };\r\n  \r\n  // Obtener datos para comparación de gas lift\r\n  const getGasLiftComparisonData = () => {\r\n    return {\r\n      noGasLift: calculateVLP(tubingSize, false, 0),\r\n      lowGasLift: calculateVLP(tubingSize, true, 0.5),\r\n      highGasLift: calculateVLP(tubingSize, true, 1.5)\r\n    };\r\n  };\r\n\r\n  // Renderizar curvas de comparación para tubings\r\n  const renderTubingComparisonCurves = () => {\r\n    const comparisonData = getTubingSizeComparisonData();\r\n    \r\n    return (\r\n      <>\r\n        <Line \r\n          data={comparisonData.small} \r\n          type=\"monotone\" \r\n          dataKey=\"vlpPressure\" \r\n          stroke=\"#87CEFA\" \r\n          name='VLP (2.5\\\")'\r\n          dot={false}\r\n          strokeWidth={1}\r\n          strokeDasharray=\"5 5\"\r\n        />\r\n        <Line \r\n          data={comparisonData.large} \r\n          type=\"monotone\" \r\n          dataKey=\"vlpPressure\" \r\n          stroke=\"#0000CD\" \r\n          name='VLP (4.5\\\")'\r\n          dot={false}\r\n          strokeWidth={1}\r\n          strokeDasharray=\"5 5\"\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Renderizar curvas de comparación para gas lift\r\n  const renderGasLiftComparisonCurves = () => {\r\n    const comparisonData = getGasLiftComparisonData();\r\n    \r\n    return (\r\n      <>\r\n        <Line \r\n          data={comparisonData.noGasLift} \r\n          type=\"monotone\" \r\n          dataKey=\"vlpPressure\" \r\n          stroke=\"#87CEFA\" \r\n          name=\"Sin Gas Lift\" \r\n          dot={false}\r\n          strokeWidth={1}\r\n          strokeDasharray=\"5 5\"\r\n        />\r\n        <Line \r\n          data={comparisonData.highGasLift} \r\n          type=\"monotone\" \r\n          dataKey=\"vlpPressure\" \r\n          stroke=\"#32CD32\" \r\n          name=\"Gas Lift Alto\" \r\n          dot={false}\r\n          strokeWidth={1}\r\n          strokeDasharray=\"5 5\"\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Calcular puntos operativos para comparación\r\n  const getComparisonOperatingPoints = () => {\r\n    if (!showComparisonCurves) return {};\r\n    \r\n    if (selectedTab === 'tubing') {\r\n      const data = getTubingSizeComparisonData();\r\n      return {\r\n        small: findOperatingPoint(data.small),\r\n        current: operatingPoint,\r\n        large: findOperatingPoint(data.large)\r\n      };\r\n    } else if (selectedTab === 'gaslift') {\r\n      const data = getGasLiftComparisonData();\r\n      return {\r\n        noGasLift: findOperatingPoint(data.noGasLift),\r\n        current: operatingPoint,\r\n        highGasLift: findOperatingPoint(data.highGasLift)\r\n      };\r\n    }\r\n    \r\n    return {};\r\n  };\r\n\r\n  // Renderizar el contenido según la pestaña seleccionada\r\n  const renderTabContent = () => {\r\n    switch (selectedTab) {\r\n      case 'tubing':\r\n        return (\r\n          <div className=\"tab-content\">\r\n            <h3>Efecto del Tamaño de Tubería en el Análisis Nodal</h3>\r\n            <p>\r\n              El diámetro de la tubería de producción afecta significativamente el comportamiento del sistema. \r\n              A medida que el diámetro disminuye:\r\n            </p>\r\n            <ul>\r\n              <li>Aumenta la fricción a altos caudales</li>\r\n              <li>Se requiere mayor presión para elevar el fluido a la superficie</li>\r\n              <li>El punto mínimo de la curva VLP tiende a desplazarse hacia caudales menores</li>\r\n            </ul>\r\n            \r\n            <div className=\"control-group\">\r\n              <label>Diámetro de Tubería (pulgadas):</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"2\"\r\n                max=\"5\"\r\n                step=\"0.5\"\r\n                value={tubingSize}\r\n                onChange={(e) => setTubingSize(Number(e.target.value))}\r\n              />\r\n              <span>{tubingSize} pulgadas</span>\r\n            </div>\r\n            \r\n            <div className=\"control-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"compare-tubing\"\r\n                checked={showComparisonCurves}\r\n                onChange={() => setShowComparisonCurves(!showComparisonCurves)}\r\n              />\r\n              <label htmlFor=\"compare-tubing\">Comparar diferentes tamaños de tubería</label>\r\n            </div>\r\n            \r\n            <div className=\"info-box\">\r\n              <h4>¿Por qué es importante?</h4>\r\n              <p>\r\n                La selección del tamaño óptimo de tubería es crucial para maximizar la producción. \r\n                Una tubería demasiado grande puede reducir la velocidad del fluido causando acumulación de líquidos, \r\n                mientras que una tubería demasiado pequeña aumenta la presión por fricción limitando el caudal.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        );\r\n        \r\n      case 'gaslift':\r\n        return (\r\n          <div className=\"tab-content\">\r\n            <h3>Sistema de Gas Lift</h3>\r\n            <p>\r\n              El gas lift es un método de levantamiento artificial que reduce la densidad de la columna de fluido \r\n              mediante la inyección de gas a diferentes profundidades, disminuyendo así la presión hidrostática.\r\n            </p>\r\n            \r\n            <div className=\"control-group\">\r\n              <div className=\"control-checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"gas-lift-active\"\r\n                  checked={isGasLiftActive}\r\n                  onChange={() => setIsGasLiftActive(!isGasLiftActive)}\r\n                />\r\n                <label htmlFor=\"gas-lift-active\">Sistema de Gas Lift Activo</label>\r\n              </div>\r\n              \r\n              {isGasLiftActive && (\r\n                <div>\r\n                  <label>Tasa de Inyección de Gas (MMscf/d):</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.1\"\r\n                    max=\"2.0\"\r\n                    step=\"0.1\"\r\n                    value={gasLiftRate}\r\n                    onChange={(e) => setGasLiftRate(Number(e.target.value))}\r\n                  />\r\n                  <span>{gasLiftRate.toFixed(1)} MMscf/d</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <div className=\"control-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"compare-gaslift\"\r\n                checked={showComparisonCurves}\r\n                onChange={() => setShowComparisonCurves(!showComparisonCurves)}\r\n              />\r\n              <label htmlFor=\"compare-gaslift\">Comparar diferentes tasas de inyección</label>\r\n            </div>\r\n            \r\n            <div className=\"info-box\">\r\n              <h4>Beneficios del Gas Lift:</h4>\r\n              <ul>\r\n                <li>Puede aumentar significativamente la producción en pozos con alta presión hidrostática</li>\r\n                <li>Tolerante a la producción de arena y sólidos</li>\r\n                <li>Puede operar en un amplio rango de condiciones de pozo</li>\r\n                <li>Menor costo operativo comparado con otros sistemas de levantamiento artificial</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        );\r\n        \r\n      default: // Caso básico\r\n        return (\r\n          <div className=\"tab-content\">\r\n            <h3>Análisis Nodal Básico</h3>\r\n            <p>\r\n              El análisis nodal es una técnica que permite predecir el comportamiento del sistema de producción \r\n              mediante la intersección de dos curvas:\r\n            </p>\r\n            <ul>\r\n              <li><strong>Curva IPR:</strong> Representa cómo el yacimiento aporta fluidos al pozo</li>\r\n              <li><strong>Curva VLP/TPR:</strong> Representa cómo el sistema de producción transporta los fluidos a superficie</li>\r\n            </ul>\r\n            <p>\r\n              El punto de intersección de ambas curvas determina las condiciones de operación del sistema (caudal y presión).\r\n            </p>\r\n            \r\n            <div className=\"controls-grid\">\r\n              <div className=\"control-group\">\r\n                <label>Presión del Reservorio (psi):</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"1000\"\r\n                  max=\"5000\"\r\n                  step=\"100\"\r\n                  value={reservoirPressure}\r\n                  onChange={(e) => setReservoirPressure(Number(e.target.value))}\r\n                />\r\n                <span>{reservoirPressure} psi</span>\r\n              </div>\r\n              \r\n              <div className=\"control-group\">\r\n                <label>Presión del Punto de Burbuja (psi):</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"500\"\r\n                  max={reservoirPressure}\r\n                  step=\"100\"\r\n                  value={bubblePointPressure}\r\n                  onChange={(e) => setBubblePointPressure(Number(e.target.value))}\r\n                />\r\n                <span>{bubblePointPressure} psi</span>\r\n              </div>\r\n              \r\n              <div className=\"control-group\">\r\n                <label>Índice de Productividad (STB/d/psi):</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0.1\"\r\n                  max=\"5\"\r\n                  step=\"0.1\"\r\n                  value={productivityIndex}\r\n                  onChange={(e) => setProductivityIndex(Number(e.target.value))}\r\n                />\r\n                <span>{productivityIndex.toFixed(1)} STB/d/psi</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  // Renderizar el gráfico principal\r\n  // Renderizar el gráfico principal\r\n  const renderMainChart = () => {\r\n    const data = getCurrentData();\r\n    \r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <LineChart\r\n          data={data}\r\n          margin={{ top: 5, right: 20, left: 20, bottom: 5 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"flowRate\" \r\n            label={{ value: 'Q = STB/d', position: 'insideBottom', offset: -5 }} \r\n            domain={[0, baseParams.maxFlowRate * 1.1]}\r\n          />\r\n          <YAxis \r\n            label={{ value: 'Presión (psi)', angle: -90, position: 'insideLeft' }} \r\n            domain={[0, baseParams.reservoirPressure * 1.1]}\r\n          />\r\n          <Tooltip \r\n            formatter={(value, name) => [value.toFixed(2), name === 'iprPressure' ? 'IPR' : 'VLP']}\r\n            labelFormatter={(value) => `Caudal: ${value.toFixed(2)} STB/d`}\r\n          />\r\n          <Legend />\r\n          \r\n          {/* Curva IPR */}\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"iprPressure\" \r\n            stroke=\"#8B4513\" \r\n            name=\"IPR\" \r\n            dot={false} \r\n            strokeWidth={2}\r\n          />\r\n          \r\n          {/* Curva VLP */}\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"vlpPressure\" \r\n            stroke=\"#00BFFF\" \r\n            name=\"VLP\" \r\n            dot={false}\r\n            strokeWidth={2}\r\n          />\r\n          \r\n          {/* Líneas de referencia */}\r\n          <ReferenceLine \r\n            y={baseParams.reservoirPressure} \r\n            stroke=\"black\" \r\n            strokeDasharray=\"5 5\"\r\n            label={{ value: 'Pr', position: 'left', fill: 'black', fontSize: 12 }}\r\n          />\r\n          \r\n          <ReferenceLine \r\n            y={baseParams.bubblePointPressure} \r\n            stroke=\"blue\" \r\n            strokeDasharray=\"5 5\"\r\n            label={{ value: 'Pb', position: 'right', fill: 'blue', fontSize: 12 }}\r\n          />\r\n          \r\n          {/* Punto de operación */}\r\n          {operatingPoint && (\r\n            <>\r\n              <ReferenceLine \r\n                x={operatingPoint.flowRate} \r\n                stroke=\"red\" \r\n                strokeDasharray=\"5 5\" \r\n                label={{ value: 'Qop', position: 'top', fill: 'red', fontSize: 12 }}\r\n              />\r\n              <ReferenceLine \r\n                y={operatingPoint.pressure} \r\n                stroke=\"red\" \r\n                strokeDasharray=\"5 5\"\r\n                label={{ value: 'Pwf', position: 'left', fill: 'red', fontSize: 12 }}\r\n              />\r\n            </>\r\n          )}\r\n          \r\n          {/* Gráficos de comparación */}\r\n          {showComparisonCurves && selectedTab === 'tubing' && renderTubingComparisonCurves()}\r\n          {showComparisonCurves && selectedTab === 'gaslift' && renderGasLiftComparisonCurves()}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n\r\n  // Renderizar tabla de resultados\r\n  const renderResultsTable = () => {\r\n    const comparisonPoints = getComparisonOperatingPoints();\r\n    const hasComparisonData = Object.keys(comparisonPoints).length > 0;\r\n    \r\n    return (\r\n      <div className=\"results-section\">\r\n        <h3>Resultados del Análisis Nodal</h3>\r\n        \r\n        <div className=\"results-current\">\r\n          <h4>Punto de Operación Actual:</h4>\r\n          <div className=\"results-grid\">\r\n            <div className=\"result-item\">\r\n              <span className=\"result-label\">Caudal: </span>\r\n              <span className=\"result-value\">{operatingPoint ? operatingPoint.flowRate.toFixed(2) : \"N/A\"} STB/d</span>\r\n            </div>\r\n            <div className=\"result-item\">\r\n              <span className=\"result-label\">Pwf: </span>\r\n              <span className=\"result-value\">{operatingPoint ? operatingPoint.pressure.toFixed(2) : \"N/A\"} psi</span>\r\n            </div>\r\n            <div className=\"result-item\">\r\n              <span className=\"result-label\">Draw Down: </span>\r\n              <span className=\"result-value\">{operatingPoint ? (baseParams.reservoirPressure - operatingPoint.pressure).toFixed(2) : \"N/A\"} psi</span>\r\n            </div>\r\n            <div className=\"result-item\">\r\n              <span className=\"result-label\">Estado del fluido: </span>\r\n              <span className=\"result-value\">\r\n                {operatingPoint && operatingPoint.pressure < baseParams.bubblePointPressure ? \"Saturado\" : \"Subsaturado\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {hasComparisonData && showComparisonCurves && (\r\n          <div className=\"results-comparison\">\r\n            <h4>Comparación de Escenarios:</h4>\r\n            <table className=\"comparison-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Caso</th>\r\n                  <th>Caudal (STB/d)</th>\r\n                  <th>Pwf (psi)</th>\r\n                  <th>Draw Down (psi)</th>\r\n                  <th>Mejora en Caudal (%)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.entries(comparisonPoints).map(([key, point]) => {\r\n                  if (!point) return null;\r\n                  \r\n                  const nameMap = {\r\n                    small: \"Tubería 2.5\\\"\",\r\n                    current: tubingSize + \"\\\"\" + (isGasLiftActive ? \" + Gas Lift\" : \"\"),\r\n                    large: \"Tubería 4.5\\\"\",\r\n                    noGasLift: \"Sin Gas Lift\",\r\n                    highGasLift: \"Gas Lift Alto\"\r\n                  };\r\n                  \r\n                  // Calcular mejora respecto al caso base\r\n                  const basePoint = comparisonPoints.noGasLift || comparisonPoints.small || comparisonPoints.current;\r\n                  const improvement = basePoint && point.flowRate > 0 ? \r\n                    ((point.flowRate - basePoint.flowRate) / basePoint.flowRate * 100) : 0;\r\n                  \r\n                  return (\r\n                    <tr key={key} className={key === 'current' ? \"current-row\" : \"\"}>\r\n                      <td>{nameMap[key] || key}</td>\r\n                      <td className=\"numeric\">{point.flowRate.toFixed(2)}</td>\r\n                      <td className=\"numeric\">{point.pressure.toFixed(2)}</td>\r\n                      <td className=\"numeric\">{(baseParams.reservoirPressure - point.pressure).toFixed(2)}</td>\r\n                      <td className=\"numeric\">\r\n                        {key === Object.keys(comparisonPoints)[0] ? \r\n                          'Base' : \r\n                          (improvement > 0 ? '+' : '') + improvement.toFixed(2) + '%'}\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Renderizar la sección de recomendaciones\r\n  const renderRecommendations = () => {\r\n    if (selectedTab === 'basic') return null;\r\n    \r\n    const comparisonPoints = getComparisonOperatingPoints();\r\n    \r\n    // Verificar si tenemos datos suficientes para hacer recomendaciones\r\n    if (!operatingPoint || Object.keys(comparisonPoints).length <= 1) return null;\r\n    \r\n    let recommendationText = '';\r\n    let actionItems = [];\r\n    \r\n    if (selectedTab === 'tubing') {\r\n      const smallPoint = comparisonPoints.small;\r\n      const largePoint = comparisonPoints.large;\r\n      \r\n      if (smallPoint && largePoint) {\r\n        if (largePoint.flowRate > operatingPoint.flowRate && \r\n            largePoint.flowRate > smallPoint.flowRate) {\r\n          recommendationText = \"Se recomienda aumentar el diámetro de la tubería de producción para incrementar el caudal.\";\r\n          actionItems = [\r\n            \"Evaluar la viabilidad técnica de reemplazar la tubería actual por una de 4.5\\\"\",\r\n            \"Realizar un análisis económico considerando costos de intervención vs. incremento de producción\",\r\n            \"Verificar que la velocidad del fluido sea suficiente para evitar acumulación de líquidos\"\r\n          ];\r\n        } else if (smallPoint.flowRate > operatingPoint.flowRate) {\r\n          recommendationText = \"La tubería más pequeña podría optimizar la producción en este caso específico.\";\r\n          actionItems = [\r\n            \"Analizar si la presión de fondo resultante está dentro de los límites operativos\",\r\n            \"Evaluar el desgaste potencial por alta velocidad de fluidos\",\r\n            \"Considerar un programa de monitoreo de presión más frecuente\"\r\n          ];\r\n        } else {\r\n          recommendationText = \"El tamaño de tubería actual parece ser el óptimo para este pozo.\";\r\n          actionItems = [\r\n            \"Mantener el tamaño de tubería actual\",\r\n            \"Considerar otras optimizaciones como sistemas de levantamiento artificial\"\r\n          ];\r\n        }\r\n      }\r\n    } else if (selectedTab === 'gaslift') {\r\n      const noGasLiftPoint = comparisonPoints.noGasLift;\r\n      const highGasLiftPoint = comparisonPoints.highGasLift;\r\n      \r\n      if (isGasLiftActive && highGasLiftPoint) {\r\n        if (highGasLiftPoint.flowRate > operatingPoint.flowRate) {\r\n          recommendationText = \"Incrementar la tasa de inyección de gas lift podría aumentar la producción.\";\r\n          actionItems = [\r\n            `Aumentar gradualmente la inyección de gas hacia ${gasLiftRate + 0.5} MMscf/d`,\r\n            \"Monitorear la relación incremental gas-petróleo para identificar el punto óptimo\",\r\n            \"Verificar que las instalaciones de superficie puedan manejar el volumen adicional de gas\"\r\n          ];\r\n        } else {\r\n          recommendationText = \"La tasa actual de inyección de gas lift parece estar cerca del óptimo.\";\r\n          actionItems = [\r\n            \"Mantener la tasa actual de inyección\",\r\n            \"Optimizar la profundidad de las válvulas de gas lift si es posible\"\r\n          ];\r\n        }\r\n      } else if (!isGasLiftActive && operatingPoint) {\r\n        recommendationText = \"Implementar un sistema de gas lift podría incrementar significativamente la producción.\";\r\n        actionItems = [\r\n          \"Diseñar un sistema de gas lift adecuado para las condiciones del pozo\",\r\n          \"Evaluar la disponibilidad de gas para inyección\",\r\n          \"Realizar un análisis económico del proyecto\"\r\n        ];\r\n      }\r\n    }\r\n    \r\n    if (!recommendationText) return null;\r\n    \r\n    return (\r\n      <div className=\"recommendations-section\">\r\n        <h3>Recomendaciones</h3>\r\n        <p>{recommendationText}</p>\r\n        \r\n        {actionItems.length > 0 && (\r\n          <>\r\n            <h4>Acciones sugeridas:</h4>\r\n            <ul>\r\n              {actionItems.map((item, index) => (\r\n                <li key={index}>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"nodal-analysis-container\">\r\n      <h2>Simulador de Análisis Nodal en Ingeniería Petrolera</h2>\r\n      \r\n      {/* Pestañas de navegación */}\r\n      <div className=\"tabs\">\r\n        <button \r\n          className={`tab ${selectedTab === 'basic' ? 'active' : ''}`}\r\n          onClick={() => {\r\n            setSelectedTab('basic');\r\n            setShowComparisonCurves(false);\r\n          }}\r\n        >\r\n          Análisis Básico\r\n        </button>\r\n        <button \r\n          className={`tab ${selectedTab === 'tubing' ? 'active' : ''}`}\r\n          onClick={() => {\r\n            setSelectedTab('tubing');\r\n            setShowComparisonCurves(false);\r\n          }}\r\n        >\r\n          Tamaño de Tubería\r\n        </button>\r\n        <button \r\n          className={`tab ${selectedTab === 'gaslift' ? 'active' : ''}`}\r\n          onClick={() => {\r\n            setSelectedTab('gaslift');\r\n            setShowComparisonCurves(false);\r\n          }}\r\n        >\r\n          Gas Lift\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Contenido de la pestaña seleccionada */}\r\n      {renderTabContent()}\r\n      \r\n      {/* Gráfico principal */}\r\n      <div className=\"chart-container\">\r\n        {renderMainChart()}\r\n      </div>\r\n      \r\n      {/* Tabla de resultados */}\r\n      {operatingPoint && renderResultsTable()}\r\n      \r\n      {/* Recomendaciones */}\r\n      {renderRecommendations()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodalAnalysis;","import React from 'react';\r\nimport NodalAnalysis from './components/NodalAnalysis';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"container\">\r\n          <h1>\r\n            <span className=\"App-icon\">⛽</span> \r\n            Simulador de Análisis Nodal para Ingeniería Petrolera\r\n          </h1>\r\n          <p className=\"App-subtitle\">\r\n            Herramienta interactiva para la evaluación y optimización de sistemas de producción\r\n          </p>\r\n        </div>\r\n      </header>\r\n      \r\n      <main className=\"App-main\">\r\n        <NodalAnalysis />\r\n      </main>\r\n      \r\n      <footer className=\"App-footer\">\r\n        <div className=\"container\">\r\n          <div className=\"footer-content\">\r\n            <div className=\"footer-section\">\r\n              <h3>Acerca de</h3>\r\n              <p>\r\n                Esta herramienta ha sido desarrollada para ayudar a ingenieros petroleros en el análisis \r\n                y optimización de sistemas de producción mediante técnicas de análisis nodal.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"footer-section\">\r\n              <h3>Referencias</h3>\r\n              <ul>\r\n                <li>Beggs, H.D. (1991). Production Optimization Using Nodal Analysis.</li>\r\n                <li>Brown, K.E. (1977). The Technology of Artificial Lift Methods.</li>\r\n                <li>Economides, M.J. et al. (1993). Petroleum Production Systems.</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"footer-section\">\r\n              <h3>Enlaces</h3>\r\n              <ul>\r\n                <li><a href=\"https://github.com/tu-usuario/nodal-analysis-simulator\" target=\"_blank\" rel=\"noopener noreferrer\">Código fuente en GitHub</a></li>\r\n                <li><a href=\"https://github.com/tu-usuario/nodal-analysis-simulator/issues\" target=\"_blank\" rel=\"noopener noreferrer\">Reportar problemas</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"footer-bottom\">\r\n            <p>&copy; {new Date().getFullYear()} Simulador de Análisis Nodal. Todos los derechos reservados.</p>\r\n            <p>Desarrollado con <span role=\"img\" aria-label=\"heart\">❤️</span> por <a href=\"https://github.com/tu-usuario\" target=\"_blank\" rel=\"noopener noreferrer\">Tu Nombre</a></p>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}